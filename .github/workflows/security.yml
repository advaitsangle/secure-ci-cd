name: Security Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Gitleaks (secrets) ----------
      - name: Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source . --no-git

      # ---------- pip-audit (dependency vulns) ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: pip install --upgrade pip-audit

      - name: pip-audit (collect JSON)
        run: |
          pip-audit -r requirements.txt -f json -o pip-audit.json || true
          test -s pip-audit.json || echo "[]" > pip-audit.json

      - name: Fail on high-severity dependency vulns (CVSS ≥ 7.0)
        run: |
          python - <<'PY'
          import json, sys

          try:
              data = json.load(open("pip-audit.json"))
          except Exception as e:
              print(f"Failed to read pip-audit.json: {e}")
              sys.exit(0)  # don't block if unreadable

          # Normalize schema to a list of dependency findings
          if isinstance(data, dict):
              for key in ("dependencies", "results", "packages", "report"):
                  if isinstance(data.get(key), list):
                      data = data[key]
                      break
                  if isinstance(data.get(key), dict) and isinstance(data[key].get("dependencies"), list):
                      data = data[key]["dependencies"]
                      break

          if not isinstance(data, list):
              print("Unrecognized pip-audit JSON schema; skipping severity gate.")
              sys.exit(0)

          def extract_vuln_list(item):
              for k in ("vulns", "advisories", "vulnerabilities"):
                  v = item.get(k)
                  if isinstance(v, list):
                      return v
              return []

          def max_cvss(vulns):
              best = 0.0
              for v in vulns:
                  # severity: [{type, score}] (newer schema)
                  sev = v.get("severity")
                  if isinstance(sev, list):
                      for s in sev:
                          if isinstance(s, dict):
                              try:
                                  best = max(best, float(s.get("score", 0)))
                              except Exception:
                                  pass
                  # legacy cvss: {score: "..."}
                  cvss = v.get("cvss")
                  if isinstance(cvss, dict):
                      try:
                          best = max(best, float(cvss.get("score", 0)))
                      except Exception:
                          pass
              return best

          highs = []
          for item in data:
              if not isinstance(item, dict):
                  continue
              name = item.get("name") or item.get("package") or "unknown"
              ver  = item.get("version") or "unknown"
              vulns = extract_vuln_list(item)
              score = max_cvss(vulns)
              if score >= 7.0:
                  ids = []
                  for v in vulns:
                      vid = v.get("id") or v.get("advisory") or v.get("alias")
                      if isinstance(vid, str):
                          ids.append(vid)
                  highs.append((name, ver, score, ids))

          if highs:
              print("High-severity dependency vulnerabilities (CVSS >= 7.0):")
              for name, ver, score, ids in highs:
                  print(f"- {name} {ver}  max_score≈{score}  ids={ids}")
              sys.exit(1)
          else:
              print("No high-severity dependency vulnerabilities (CVSS >= 7.0).")
          PY

      # ---------- Semgrep (code scanning) ----------
      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          args: --severity ERROR

